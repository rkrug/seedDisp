# -*- eval: (add-hook 'org-babel-post-tangle-hook( lambda () (call-process-shell-command "./postTangleScript.sh" nil 0 nil); -*-

#+TITLE:     seedDisp.org
#+AUTHOR:    Charles C. Berry    
#+EMAIL:     cberry@tajo.ucsd.edu
#+DATE:      2010-12-08 Thur
#+DESCRIPTION: R Package Development Helpers

#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 

#+TODO: TODO OPTIMIZE TOGET COMPLETE WAIT VERIFY CHECK CODE DOCUMENTATION | DONE RECEIVED CANCELD 

#+STARTUP: hidestars hideblocks
#+DRAWERS: HIDDEN PROPERTIES STATE CONFIG BABEL OUTPUT LATEXHEADER HTMLHEADER
#+STARTUP: nohidestars hideblocks

:BABEL:
#+BABEL: :padline no
#+BABEL: :comments no
#+BABEL: :var MAINVERSION=0
#+BABEL: :var SVNVERSION=(vc-working-revision (buffer-file-name))
#+BABEL: :var SVNSTATE=(if (eq (vc-state (or (buffer-file-name) org-current-export-file)) 'up-to-date) 0 13)
:END:

:HTMLHEADER:
#+begin_html
  <div id="subtitle" style="float: center; text-align: center;">
  <p>
Org-babel support for building 
  <a href="http://www.r-project.org/">R</a> packages
  </p>
  <p>
  <a href="http://www.r-project.org/">
  <img src="http://www.r-project.org/Rlogo.jpg"/>
  </a>
  </p>
  </div>
#+end_html
:END:

* Internal configurations                                          :noexport:
** Evaluate to run post tangle script
#+begin_src emacs-lisp :results silent :tangle no :exports none
  (add-hook 'org-babel-post-tangle-hook
            (
             lambda () 
                    (call-process-shell-command "./postTangleScript.sh" nil 0 nil)
  ;;              (async-shell-command "./postTangleScript.sh")
  ;;              (ess-load-file (save-window-excursion (replace-regexp-in-string ".org" ".R" buffer-file-name)))))
  ;;              (ess-load-file "nsa.R")))
  ;;              (ess-load-file "spreadSim.R")
                    )
            )
#+end_src

** Post tangle script
#+begin_src sh :results output :tangle ./postTangleScript.sh :var VER=(vc-working-revision (buffer-file-name)) :var STATE=(vc-state (or (buffer-file-name) org-current-export-file))
  sed -i s/MAINVERSION/$MAINVERSION/ ./pkg/DESCRIPTION
  sed -i s/SVNVERSION/$SVNVERSION/ ./pkg/DESCRIPTION
  sed -i s/SVNSTATE/$SVNSTATE/ ./pkg/DESCRIPTION
  sed -i s/TODAYSDATE/`date +%Y-%m-%d_%H-%M`/ ./pkg/DESCRIPTION

  sed -i s/MAINVERSION/$MAINVERSION/ ./pkg/seedDisp-package.R
  sed -i s/SVNVERSION/$SVNVERSION/ ./pkg/seedDisp-package.R
  sed -i s/SVNSTATE/$SVNSTATE/ ./pkg/seedDisp-package.R
  sed -i s/TODAYSDATE/`date +%Y-%m-%d_%H-%M`/ ./pkg/seedDisp-package.R

  Rscript -e "library(roxygen2);roxygenize('pkg', roxygen.dir='pkg', copy.package=FALSE, unlink.target=FALSE)"
#+end_src

#+results:
: Updating collate directive in  /home/rkrug/Documents/Projects/R-Packages/seeddisp/pkg/DESCRIPTION 
: Updating namespace directives


* seedDisp package
** Package description
#+begin_src R :eval nil :tangle ./pkg/seedDisp-package.R :shebang :padline no :no-expand :comments no
  ##' Disperses seeds by using different routines
  ##' 
  ##' \tabular{ll}{
  ##' Package: \tab seedDisp\cr
  ##' Type: \tab Package\cr
  ##' Version: \tab MAINVERSION.SVNVERSION.SVNSTATE\cr
  ##' Date: \tab TODAYSDATE\cr
  ##' License: \tab GPL (>= 2)\cr
  ##' LazyLoad: \tab yes\cr
  ##' }
  ##'
  ##' @docType package
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  NULL
#+end_src

** DESCRIPTION
#+begin_src R :tangle ./pkg/DESCRIPTION :shebang :padline no :no-expand :comments no
  Package: seedDisp
  Type: Package
  Title: Dispersal of seed routines
  Version: MAINVERSION.SVNVERSION-SVNSTATE
  Date: TODAYSDATE
  Author: Rainer M. Krug
  Maintainer: Rainer M Krug <Rainer@krugs.de>
  Description: Collection of different seed dispersal routines.
  License: GPL-3
  LazyLoad: yes
  Depends: Rcpp, spgrass6
  LinkingTo: Rcpp
  
#+end_src

** NAMESPACE
#+begin_src R :tangle ./pkg/NAMESPACE :shebang :padline no :no-expand :comments no
  useDynLib(seedDisp)
  exportPattern("^[[:alpha:]]+")
#+end_src

#+results:

** R
*** Wind dispersal
**** windDisp
#+begin_src R :eval nil :tangle ./pkg/R/windDisp.R :no-expand
  ##' Disperses seeds from a seed \code{matrix} by using a
  ##' 2 dimensional dispersal \code{matrix}
  ##'
  ##' A \code{matrix} of the same size as SEEDS containing the dispersed seeds 
  ##' @usage windDisp(SD2D, SEEDS, MASK)
  ##' @name windDisp
  ##' @title Dispersal of seeds by wind
  ##' @param SD2D \code{matrix} defining the 2D seed dispersal kernel 
  ##' @param SEEDS \code{matrix} specifying the number of seeds to be dispersed
  ##' @param MASK \code{matrix} defining the area in which processing takes place (\code{!is.na(MASK)}) 
  ##' @return \code{matrix} of same size as SEEDS containing the dispersed seeds
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  ##' @export 
  ##' @callGraphPrimitives
  ##' @useDynLib seedDisp
  windDisp <- function(SD2D, SEEDS, MASK) {
    ## Calculate size parameter of sd2D
    dx2 <- (ncol(SD2D) - 1)
    dy2 <- (nrow(SD2D) - 1)
    dx <- dx2 / 2
    dy <- dy2 / 2
    ## buffer for dispersal into cells at the edge
    buffer <- matrix(NA, nrow=nrow(SEEDS), ncol=dx)
    SEEDS <- cbind(buffer, SEEDS, buffer)
    buffer <- matrix(NA, ncol=ncol(SEEDS), nrow=dy)
    SEEDS <- rbind(buffer, SEEDS, buffer)
    ## call C++ function
    return(
           .Call(
                 "windDispCpp",
                 dx2,
                 dy2,
                 SD2D,
                 SEEDS,
                 MASK,
                 PACKAGE = "seedDisp"
                 )
           )
  }
  
#+end_src

**** windDispGRASS
#+begin_src R :eval nil :tangle ./pkg/R/windDispGRASS.R :no-expand
  ##' Disperses seeds from a seed \code{matrix} by using a
  ##' 2 dimensional dispersal \code{matrix}
  ##' and doing the calculations based on raster in GRASS
  ##'
  ##' @usage windDisp(SD2D, input, output="windDispSeeds", overwrite=FALSE)
  ##' @name windDispGRASS
  ##' @title Dispersal of seeds by wind
  ##' @param SD2D \code{matrix} defining the 2D seed dispersal kernel 
  ##' @param input \code{character} name of GRASS raster layer specifying number of seeds to be dispersed
  ##' @param output \code{character} name of GRASS raster layer generated, containing the dispersed seeds
  ##' @param overwrite \code{boolean} TRUE to overwrite existing output raster
  ##' @return \code{character} name of the output layer
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  ##' @export 
  ##' @callGraphPrimitives
  windDispGRASS <- function(SD2D, input, output="windDispSeeds", overwrite=FALSE) {
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) ) & !overwrite ) {
      stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
  
    seeds <- readRAST6(
                       c(
                         input,
                         "MASK"
                         ),
                       NODATA=-1
                       )
    ## seeds.m <- sgdfToMatrix(seeds, 1)
    seeds.m <- matrix(
                    seeds[[1]],
                    nrow=gridparameters(seeds)$cells.dim[1],
                    ncol=gridparameters(seeds)$cells.dim[2])
    ## mask.m <- sgdfToMatrix(seeds, 2)
    mask.m <- matrix(
                     seeds[[2]],
                     nrow=gridparameters(seeds)$cells.dim[1],
                     ncol=gridparameters(seeds)$cells.dim[2])
  
    dispSeeds.m <- windDisp(
                            SD2D = SD2D,
                            SEEDS = seeds.m,
                            MASK = mask.m
                            )
  
    seeds@data[[2]] <- as.vector(dispSeeds.m)
    
    mode(seeds[[2]]) <- "double"
    ## seeds@proj4string <- parameter$proj4string
    writeRAST6(
               seeds,
               output,
               NODATA = -1,
               zcol=2,
               overwrite = overwrite
               )
    execGRASS(
              "r.null",
              parameters = list(
                map  = output,
                setnull = "0"
                ),
              ignore.stderr=!options("asmDebug")[[1]]
              )
    return(output)
  }
  
#+end_src

*** Local dispersal
**** localDispGRASS
#+begin_src R  :eval nil :tangle ./pkg/R/localDispGRASS.R :no-expand
  ##' Locally disperse seeds from a seed layer using GRASS
  ##' 
  ##' @usage localDispGRASS(input, output, overwrite)
  ##' @name localDispGRASS
  ##' @title Dispersal of seeds locally, i.e. in surounding cells (half, evenly distributed)
  ##' @param input \code{character} name of GRASS raster layer specifying number of seeds to be dispersed
  ##' @param output \code{character} name of GRASS raster layer generated, containing the dispersed seeds
  ##' @param overwrite \code{boolean} TRUE to overwrite existing output raster
  ##' @return \code{character} name of the output layer
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  ##' @export 
  ##' @callGraphPrimitives
  localDispGRASS <- function(input, output="localDispSeeds", overwrite=FALSE) {
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) )  & !overwrite ) {
      stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
    r.mapcalc <- function(...)
      {
        comm <- paste( "r.mapcalc ", " \"", ..., "\" ", sep="" )
        system( comm, intern=TRUE )
      }
    ## temporary layer name
    tmp <- "TMP"
    ## calculate 16th of to be dispersed seeds and set nulls to 0
    r.mapcalc(
              tmp,
              " = ",
              "double( ", input, " / 16 )"
              ## 8/16 will remain in source cell,
              ## 8/16 will be evenly distributed in neighbouring cells
              )
    execGRASS(
              "r.null",
              parameters = list(
                map  = tmp,
                null = 0
                )
              )
    ## Local Dispersal of all seeds in input
    r.mapcalc(
              output,
              " = ",
              "double( round(", 
              tmp, "[-1,-1] + ",
              tmp, "[-1, 0] + ",
              tmp, "[-1, 1] + ",
              tmp, "[ 0,-1] + ",
              " 8 * ", tmp, "[ 0, 0] + ",
              tmp, "[ 0, 1] + ",
              tmp, "[ 1,-1] + ",
              tmp, "[ 1, 0] + ",
              tmp, "[ 1, 1]",
              " ) )"
              )
    ## remove tmp
    execGRASS(
              cmd = "g.remove",
              parameter = list(
                rast = tmp
                )
              )
    ## return name of output layer
    return(output)
  } 
  
#+end_src

*** Bird dispersal
**** birdDispGRASS
#+begin_src R  :eval nil :tangle ./pkg/R/birdDispGRASS.R :no-expand
  ##' Bird disperse seeds from a seed layer using GRASS
  ##' 
  ##' @usage birdDispGRASS(input, output, overwrite)
  ##' @name birdDispGRASS
  ##' @title Dispersal of seeds by birds
  ##' 
  ##' @param input \code{character} name of GRASS raster layer specifying number of seeds to be dispersed
  ##' @param output \code{character} name of GRASS raster layer generated, containing the dispersed seeds
  ##' @param overwrite \code{boolean} TRUE to overwrite existing output raster
  ##' @return \code{character} name of the output layer
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  ##' @export 
  ##' @callGraphPrimitives
  birdDispGRASS <- function(input, output="birdDispSeeds", overwrite=FALSE) {
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) )  & !overwrite ) {
      stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
    MASK <- "MASK"
    seeds <- readRAST6(
                       c(
                         input,
                         MASK
                         ),
                       NODATA=-1
                       )
    oldWarn <- options()$warn
    options(warn=-1)
    seeds[[3]] <- 0
    seeds[[3]][!is.na(seeds[[MASK]])] <- rbinom(                                     # Bird dispersal
                                                cells <- sum(!is.na(seeds[[MASK]])), # into all cells which are not NULL in the region
                                                sum(seeds[[input]], na.rm=TRUE),     # seeds to disperse
                                                1/cells                              # probability is the same for each cell
                                                )
    options(warn=oldWarn)
  
    seeds[[3]][seeds[[3]]==0] <- NA
  
    writeRAST6(
               seeds,
               output,
               NODATA = -1,
               zcol=3,
               overwrite = overwrite
               )
    ## return name of output layer
    return(output)
  } 
  
#+end_src

*** TODO Water dispersal
**** TODO flowMbyAgnps
This function will convert the apnps direction from GRASS into index differences for a R matrix

- From GRASS :: agnps based
|---+---+---|
| 8 | 1 | 2 |
|---+---+---|
| 7 |   | 3 | 
|---+---+---|
| 6 | 5 | 4 |
|---+---+---|

- In R matrix ::
|---+---+---|
| 6 | 5 | 4 |
|---+---+---|
| 7 |   | 3 | 
|---+---+---|
| 8 | 1 | 2 |
|---+---+---|

- In R matrix :: based on e.g. ~as.matrix(readGRASS6())~:
|------------+----------+------------|
| [x-1, y-1] | [x, y-1] | [x+1, y-1] |
|------------+----------+------------|
| [x-1, y  ] | [x, y  ] | [x+1, y  ] |
|------------+----------+------------|
| [x-1, y+1] | [x, y+1] | [x+1, y+1] |
|------------+----------+------------|

#+begin_src R  :eval nil :tangle ./pkg/R/shiftMByAgnps.R :no-expand
  ##' Flow cells in m by one cell usind the direction given in agnps and adds the
  ##' 
  ##' @usage flowMByAgnps(m, agnps, depRate)
  ##' @name flowMByAgnps
  ##' @title Determine formula for Deposit layer
  ##' 
  ##' @title Flow cells in matrix m in direction given in agnps matrix
  ##' @param input \code{matrix} of seeds to be dispersed by water flow
  ##' @param m \code{matrix} to be "flown" of same dimensionality as \code{input}
  ##' @param agnps \code{matrix} of same dim=ension as \code{m} containing agnps flow directions as returned from GRASS of same dimensionality as \code{input}
  ##' @return 
  ##' @author Rainer M Krug
  ##' @export 
  ##' @callGraphPrimitives
  flowMByAgnps <- function(input, depRate, agnps) {
    ## define vectors for flowing direction translation from agnps to matrix
    ## agnps 1,  2,  3,  4,  5,  6,  7,  8) 
    dx <- c( 0, +1, +1, +1,  0, -1, -1, -1) # first index in matrix
    dy <- c(-1, -1,  0, +1, +1, +1,  0, -1) # second index in matrix
    ## create index Matix
    im <- cbind(
                rep(1:nrow(input), each=ncol(input)),
                rep(1:ncol(input), nrow(input))
                )
    ## create "flowed" index matrix
    ## this matrix will contain the NEW locations of the cells
    ## Cells not included in ims will be set to NA, as nothing flows into them.
    ims <- im
    ## calculate x-flow
    ims[,1] <- im[,1] + dx[agnps[im]]
    ## and correct for "out of matrix flows"
    ims[,1][ims[,1] < 1      ] <- NA
    ims[,1][ims[,1] > nrow(input)] <- NA
    ## calculate y-flow
    ims[,2] <- im[,2] + dy[agnps[im]]
    ## and correct for "out of matrix flows"
    ims[,2][ims[,2] < 1      ] <- NA
    ims[,2][ims[,2] > ncol(input)] <- NA
    ## remove all which have NA from im and ims
    sel <- !is.na(ims[,1]) & !is.na(ims[,2])
    im <- im[sel,]
    ims <- ims[sel,]
    ## build flowed matrix m
    output.dep <- input
    output.dep[] <- 0
    output.disp <- input
    ## populate output
    j <- 0
    ## reset output.disp to 0 and use previous output.disp as input.disp
    input.disp <- output.disp
    output.disp[] <- 0
    ## call recursively, until the number of seeds in output.disp == 0
    repeat {
      ## define imX andimsX, as they will be modified in the while loop
      imX <- im
      imsX <- ims
      j <- j+1
      i <- 0
      while (nrow(imsX) > 0) {
        i <- i+1
        print( paste(j, i, sum(output.disp, na.rm=TRUE)) )
        ## identify uniques
        uni <- !duplicated(imsX)
        ## calculate seeds to be leaving cell 
        flow <-  ceiling( (1 - depRate[imX[uni,]]) * input.disp[imX[uni,]] )
        ## subtract flowing seeds from initial cells
        output.dep[imX[uni,]] <- input.disp[imX[uni,]] - flow
        ## add flowing seeds to target cells
        output.disp[imsX[uni,]] <- output.disp[imsX[uni,]] + flow
        ## take unique calls away and start again
        imX  <- imX [!uni,]
        imsX <- imsX[!uni,]
      }
      if (sum(output.disp, na.rm=TRUE) == 0) {
        break()
      }
    }
    ##
    return(output)
  }
  
#+end_src

*** waterDispGRASS
#+begin_src R  :eval nil :tangle ./pkg/R/waterDispGRASS.R :no-expand
  ##' Water disperse seeds from a seed layer using GRASS
  ##' 
  ##' @usage waterDispGRASS(input, output="waterDispSeeds", slope="SLOPE", flowdir="FLOWDIR", overwrite=FALSE)
  ##' @name waterDispGRASS
  ##' @title Dispersal of seeds by water
  ##' 
  ##' @param input \code{character} name of GRASS raster layer specifying number of seeds to be dispersed
  ##' @param output \code{character} name of GRASS raster layer generated, containing the dispersed seeds
  ##' @param slope \code{character} name of GRASS raster layer containing the slope in degrees
  ##' @param flowdir \code{character} name of GRASS raster containing flow direction (in GRASS agnps format)
  ##' @param depRates \code{matrix} where the first column are slope and the second column the responding deposit rates
  ##' @param overwrite \code{boolean} TRUE to overwrite existing output raster
  ##' @return \code{character} name of the output layer
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  ##' @export 
  ##' @callGraphPrimitives
  waterDispGRASS <- function(input, output="waterDispSeeds", slope="slope", flowdir="flowdir", depRates, overwrite=FALSE) {
    stop("TO BE IMPLEMENTED")
  
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) )  & !overwrite ) {
      stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    }
  #######################
    names(depRates) <- c("depDegrees", "depRates")
    ## Load seeds layer
    seeds <- readRAST6(
                       input,
                       NODATA = -1
                       )
    seeds.m <- matrix(
                      seeds[[1]],
                      nrow=gridparameters(seeds)$cells.dim[1],
                      ncol=gridparameters(seeds)$cells.dim[2]
                      )
    # seeds.m[is.na(seeds.m)] <- -1  
    ## Load slope layer
    slope <- readRAST6(
                       slope,
                       NODATA = -1
                       )
    slope.m <- matrix(
                      slope[[1]],
                      nrow=gridparameters(slope)$cells.dim[1],
                      ncol=gridparameters(slope)$cells.dim[2]
                      )
    ## Load flowdir layer
    flowdir <- readRAST6(
                         flowdir,
                         NODATA = -1
                         )
    
    flowdir.m <- matrix(
                        flowdir[[1]],
                        nrow=gridparameters(flowdir)$cells.dim[1],
                        ncol=gridparameters(flowdir)$cells.dim[2]
                        )
    ## calculate deposit rates (depRate)
    depRate <- slope
    depRate[[1]] <- cut(
                        x      = slope[[1]],
                        breaks = depRates$depDegrees,
                        labels = FALSE
                        )
    depRate[[1]] <- depRates$depRate[depRate[[1]]]
    depRate.m <- matrix(
                        depRate[[1]],
                        nrow=gridparameters(depRate)$cells.dim[1],
                        ncol=gridparameters(depRate)$cells.dim[2]
                        )
    ## Create output layer (seeds$output)
    seeds$output <- NA
    output.m <- seeds.m
    output.m[] <- 0
    
    ## calculate number of seeds to be dispersed into cells downstream
    ## TODO add filters to only calculate relevant cells
  
    seedsDep.m <- ceiling(depRate.m * seeds.m)
    output.m <- output.m + seedsDep.m
    seeds.m <- seeds.m - seedsDep.m
    seeds.m[seeds.m < 0] <- 0
    seeds.m <- shiftMbyAgnps(seeds.m, agnps)
  
    
  } 
#+end_src

***** calcDepLayer

#+begin_src R  :eval nil :tangle ./pkg/R/calcDepLayer.R :no-expand
  ##' Calculate GRASS mapcalc function to calculate water dispersal layer
  ##' 
  ##' @usage calcDepLayerGRASS(input, output="depLayer", slope="slope", flowdir="flowdir", depRates, overwrite=FALSE
  ##' @name calcDepLayerGRASS
  ##' @title Determine formula for Deposit layer
  ##' 
  ##' @param slope \code{character} name of slope layer 
  ##' @param flowdir \code{character} name of flow direction layer in GRASS agnps format
  ##' @param depRates \code{list} list of two \code{numeric} vectors of same length, where depRates[[1]] are the degrees and depRates[[2]] the according deposit rates
  ##' @param overwrite \code{boolean} TRUE to overwrite existing output raster
  ##' @return \code{character} ?????
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  ##' @export 
  ##' @callGraphPrimitives
  calcDepLayerGRASS <- function(slope="slope", flowdir="flowdir", depRates, overwrite=FALSE) {
    stop("TO BE IMPLEMENTED")
  
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) )  & !overwrite ) {
      stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
    ## #####################
    r.mapcalc <- function(...)
      {
        comm <- paste( "r.mapcalc ", " \"", ..., "\" ", sep="" )
        system( comm, intern=TRUE )
      }
  
    ## #####################
    ## this function should return a vector containing information on how to calculate the number of seed s in the final matrix
    .flowNext <- function(
                          x,              # x-location in matrix
                          y,              # y-location in matrix
                          dep,            # deposit rates matrix
                          dir             # flow direction matrix
                          )
      {
        if (
            !is.na(FLOW[x, y])  |
            is.na(dep[x, y])  |
            dep[x, y] ==1     |
            is.na(dir[x, y])
            ) {
          FLOW[x, y] <<- FLOW[x, y] + seeds
          seeds <- 0
        } else {
          dep <- round( seeds * dep[x, y] )
          FLOW[x, y] <<- dep
          seeds <- seeds - dep
        }
        if (seeds > 0)
          {
            switch(
                   dir[x, y],
                   {x <- x    ; y <- y - 1}, # 1
                   {x <- x + 1; y <- y    }, # 2
                   {x <- x + 1; y <- y    }, # 3
                   {x <- x + 1; y <- y    }, # 4
                   {x <- x    ; y <- y + 1}, # 5
                   {x <- x - 1; y <- y + 1}, # 6
                   {x <- x - 1; y <- y + 1}, # 7
                   {x <- x - 1; y <- y    }, # 8
                   {stop("Wrong number for dir!")}
                   )
            if (seeds > 1)
              {
                .flowNext(x, y, seeds, dep, dir)
              }
          }
        return(list(x, y, seeds))
      }
    ## #####################
    
    names(depRates) <- c("depDegrees", "depRates")
    ## read slope layer
    slope <- readRAST6(
                       slope,
                       NODATA = -1
                       )
    slope.m <- matrix(
                      slope[[1]],
                      nrow=gridparameters(slope)$cells.dim[1],
                      ncol=gridparameters(slope)$cells.dim[2]
                      )
    ## read flowdir layer
    flowdir <- readRAST6(
                         flowdir,
                         NODATA = -1
                         )
    flowdir.m <- matrix(
                        flowdir[[1]],
                        nrow=gridparameters(flowdir)$cells.dim[1],
                        ncol=gridparameters(flowdir)$cells.dim[2]
                        )
    ## calculate deposit rates (depRate)
    depRate <- slope
    depRate[[1]] <- cut(
                        x      = slope[[1]],
                        breaks = depRates$depDegrees,
                        labels = FALSE
                        )
    depRate[[1]] <- depRates$depRate[depRate[[1]]]
    depRate.m <- matrix(
                        depRate[[1]],
                        nrow=gridparameters(depRate)$cells.dim[1],
                        ncol=gridparameters(depRate)$cells.dim[2]
                        )
    ## Create output layer (seeds$output)
    dep.m <- depRate.m
    dep.m[] <- "0"
  
    ## calculate number of seeds to be dispersed into cells downstream
    for (x in 1:nrow(flowdir.m))
      {
        cat(x, " ")
        for (y in 1:ncol(flowdir.m))
          {
            if (isTRUE(depRate.m[x, y] > 0 & depRate.m[x,y] < 1))
              {
                FLOW[x, y] <<- FLOW[x, y] + seeds
                seeds <- 0
              } else {
                dep <- "round( seeds * dep[x, y] )
                FLOW[x, y] <<- dep
                seeds <- seeds - dep
              }
            if (seeds > 0)
              {
                switch(
                       dir[x, y],
                       {x <- x    ; y <- y - 1}, # 1
                       {x <- x + 1; y <- y    }, # 2
                       {x <- x + 1; y <- y    }, # 3
                       {x <- x + 1; y <- y    }, # 4
                       {x <- x    ; y <- y + 1}, # 5
                       {x <- x - 1; y <- y + 1}, # 6
                       {x <- x - 1; y <- y + 1}, # 7
                       {x <- x - 1; y <- y    }, # 8
                       {stop("Wrong number for dir!")}
                       )
                if (seeds > 1)
                  {
                    .flowNext(x, y, seeds, dep, dir)
                  }
              }
            path <- !is.na(FLOW)
            seeds$output[path] <- as.vector(FLOW[path])
            FLOW[path] <- NA
          }
      }
  
  }
  cat( "\n" )
  
    ## seedsSoil[[1]][seedsSoil[[1]]==0] <- NA
  
    ## ## save seedsSoil layer
    ## mode( seedsSoil[[1]] ) <- "double"
    ## seedsSoil@proj4string <- parameter$proj4string
    ## writeRAST6(
    ##            seedsSoil,
    ##            layerName(species, type="seedsSoil", year=parameter$year),
    ##            NODATA = -1,
    ##            zcol=1,
    ##            overwrite = TRUE
    ##            )
  
    ## ## g.remove( "rast=", tmpDispWater, ignore.stderr=TRUE )
    ## execGRASS(
    ##           cmd = "g.remove",
    ##           parameter = list(
    ##             rast = tmpDispWater
    ##             ),
    ##           ignore.stderr=!options("asmDebug")[[1]]
    ##           )
    
    ## dummy output
    r.mapcalc(output, " = ", "input")
    return(output)
  }
  
#+end_src

#+results:

***** waterDispGRASS
#+begin_src R  :eval nil :tangle ./pkg/R/waterDispGRASS.R :no-expand
  ##' Water disperse seeds from a seed layer using GRASS
  ##' 
  ##' @usage waterDispGRASS(input, output="waterDispSeeds", slope="SLOPE", flowdir="FLOWDIR", overwrite=FALSE)
  ##' @name waterDispGRASS
  ##' @title Dispersal of seeds by water
  ##' 
  ##' @param input \code{character} name of GRASS raster layer specifying number of seeds to be dispersed
  ##' @param output \code{character} name of GRASS raster layer generated, containing the dispersed seeds
  ##' @param slope \code{character} name of GRASS raster layer containing the slope in degrees
  ##' @param flowdir \code{character} name of GRASS raster containing flow direction (in GRASS agnps format)
  ##' @param depRates \code{matrix} where the first column are slope and the second column the responding deposit rates
  ##' @param overwrite \code{boolean} TRUE to overwrite existing output raster
  ##' @return \code{character} name of the output layer
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  ##' @export 
  ##' @callGraphPrimitives
  waterDispGRASS <- function(input, output="waterDispSeeds", slope="slope", flowdir="flowdir", depRates, overwrite=FALSE) {
    stop("TO BE IMPLEMENTED")
  
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) )  & !overwrite ) {
      stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
    #######################
    r.mapcalc <- function(...)
      {
        comm <- paste( "r.mapcalc ", " \"", ..., "\" ", sep="" )
        system( comm, intern=TRUE )
      }
    #######################
    .flowNext <- function(x, y, seeds, dep, dir)  ## FOR MATRIX GENERATED BY sgdfToMatrix, I.E. NORTH = DOWN!!! 
      {
        if (
            !is.na(FLOW[x, y])  |
            is.na(dep[x, y])  |
            dep[x, y] ==1     |
            is.na(dir[x, y])
            ) {
          FLOW[x, y] <<- FLOW[x, y] + seeds
          seeds <- 0
        } else {
          dep <- round( seeds * dep[x, y] )
          FLOW[x, y] <<- dep
          seeds <- seeds - dep
        }
  
        if (seeds > 0)
          {
            switch(
                   dir[x, y],
                   {x <- x    ; y <- y - 1}, # 1
                   {x <- x + 1; y <- y    }, # 2
                   {x <- x + 1; y <- y    }, # 3
                   {x <- x + 1; y <- y    }, # 4
                   {x <- x    ; y <- y + 1}, # 5
                   {x <- x - 1; y <- y + 1}, # 6
                   {x <- x - 1; y <- y + 1}, # 7
                   {x <- x - 1; y <- y    }, # 8
                   {stop("Wrong number for dir!")}
                   )
            if (seeds > 1)
              {
                .flowNext(x, y, seeds, dep, dir)
              }
          }
        return(list(x, y, seeds))
      }
    #######################
    names(depRates) <- c("depDegrees", "depRates")
    ## Load seeds layer
    seeds <- readRAST6(
                       input,
                       NODATA = -1
                       )
    seeds.m <- matrix(
                      seeds[[1]],
                      nrow=gridparameters(seeds)$cells.dim[1],
                      ncol=gridparameters(seeds)$cells.dim[2]
                      )
    seeds.m[is.na(seeds.m)] <- -1
  
    ## Calculate flow and deposit parameter
    ## read topo laywers
    slope <- readRAST6(
                       slope,
                       NODATA = -1
                       )
    slope.m <- matrix(
                      slope[[1]],
                      nrow=gridparameters(slope)$cells.dim[1],
                      ncol=gridparameters(slope)$cells.dim[2]
                      )
    ##
    flowdir <- readRAST6(
                         flowdir,
                         NODATA = -1
                         )
    
    flowdir.m <- matrix(
                        flowdir[[1]],
                        nrow=gridparameters(flowdir)$cells.dim[1],
                        ncol=gridparameters(flowdir)$cells.dim[2]
                        )
    ## calculate deposit rates (depRate)
    depRate <- slope
    depRate[[1]] <- cut(
                        x      = slope[[1]],
                        breaks = depRates$degrees,
                        labels = FALSE
                        )
    depRate[[1]] <- depRates$depRate[depRate[[1]]]
    depRate.m <- matrix(
                        depRate[[1]],
                        nrow=gridparameters(depRate)$cells.dim[1],
                        ncol=gridparameters(depRate)$cells.dim[2]
                        )
    ## Create output layer (seeds$output)
    seeds$output <- NA
    FLOW <- seeds.m * NA
  
    ## calculate number of seeds to be dispersed into cells downstream
    for (x in 1:nrow(seeds.m))
      {
        cat(x, " ")
        for (y in 1:ncol(seeds.m))
          {
            if (seeds.m[x, y] > 0)
              {
                .flowNext(x, y, seeds.m[x, y], depRate.m, flowdir.m)
                path <- !is.na(FLOW)
                seeds$output[path] <- as.vector(FLOW[path])
                FLOW[path] <- NA
              }
          }
      }
    cat( "\n" )
  
    ## seedsSoil[[1]][seedsSoil[[1]]==0] <- NA
  
    ## ## save seedsSoil layer
    ## mode( seedsSoil[[1]] ) <- "double"
    ## seedsSoil@proj4string <- parameter$proj4string
    ## writeRAST6(
    ##            seedsSoil,
    ##            layerName(species, type="seedsSoil", year=parameter$year),
    ##            NODATA = -1,
    ##            zcol=1,
    ##            overwrite = TRUE
    ##            )
  
    ## ## g.remove( "rast=", tmpDispWater, ignore.stderr=TRUE )
    ## execGRASS(
    ##           cmd = "g.remove",
    ##           parameter = list(
    ##             rast = tmpDispWater
    ##             ),
    ##           ignore.stderr=!options("asmDebug")[[1]]
    ##           )
    
    ## dummy output
    r.mapcalc(output, " = ", "input")
    return(output)
  }
  
#+end_src

** src
:PROPERTIES:
:no-expand: true
:END:
*** Makevars
#+begin_src sh :results silent :tangle ./pkg/src/Makevars :eval nil
  ## Use the R_HOME indirection to support installations of multiple R version
  PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"`
  
  ## As an alternative, one can also add this code in a file 'configure'
  ##
  ##    PKG_LIBS=`${R_HOME}/bin/Rscript -e "Rcpp:::LdFlags()"`
  ## 
  ##    sed -e "s|@PKG_LIBS@|${PKG_LIBS}|" \
  ##        src/Makevars.in > src/Makevars
  ## 
  ## which together with the following file 'src/Makevars.in'
  ##
  ##    PKG_LIBS = @PKG_LIBS@
  ##
  ## can be used to create src/Makevars dynamically. This scheme is more
  ## powerful and can be expanded to also check for and link with other
  ## libraries.  It should be complemented by a file 'cleanup'
  ##
  ##    rm src/Makevars
  ##
  ## which removes the autogenerated file src/Makevars. 
  ##
  ## Of course, autoconf can also be used to write configure files. This is
  ## done by a number of packages, but recommended only for more advanced users
  ## comfortable with autoconf and its related tools.
  
  
#+end_src

*** Makevars.win
#+begin_src sh :results silent :tangle ./pkg/src/Makevars.win :eval nil
  ## Use the R_HOME indirection to support installations of multiple R version
  PKG_LIBS = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript.exe" -e "Rcpp:::LdFlags()")
#+end_src
*** windDispCpp.h
#+begin_src c++ :tangle ./pkg/src/windDispCpp.h
  #ifndef _test_WINDDISPCPP_H
  #define _test_WINDDISPCPP_H
  
  #include <Rcpp.h>
  
  /*
   * note : RcppExport is an alias to `extern "C"` defined by Rcpp.
   *
   * It gives C calling convention to the rcpp_hello_world function so that 
   * it can be called from .Call in R. Otherwise, the C++ compiler mangles the 
   * name of the function and .Call can't find it.
   *
   * It is only useful to use RcppExport when the function is intended to be called
   * by .Call. See the thread http://thread.gmane.org/gmane.comp.lang.r.rcpp/649/focus=672
   * on Rcpp-devel for a misuse of RcppExport
   */
  
  RcppExport SEXP windDispCpp( SEXP DX2, SEXP DY2, SEXP SD2D, SEXP SEEDS, SEXP MASK) ;
  
  // definition
  
  #endif
  
#+end_src

*** windDispCpp.cpp
#+BEGIN_SRC c++ :tangle ./pkg/src/windDispCpp.cpp
  #include "windDispCpp.h"
  
  SEXP windDispCpp( SEXP DX2, SEXP DY2, SEXP SD2D, SEXP SEEDS, SEXP MASK ){
    using namespace Rcpp;
  
    // The input parameter  
    int dx2 = as<int>(DX2); // by reference or value?
    int dy2 = as<int>(DY2);
    NumericVector sd2D (SD2D); // by reference!
    IntegerMatrix seeds (SEEDS);
    IntegerMatrix mask (MASK);
  
    // result vector
    IntegerMatrix dispSeeds = clone<IntegerMatrix>(mask);
  
    // internal variables
    IntegerVector s (sd2D.size());
    RNGScope scope;                 // N.B. Needed when calling random number generators
  
    int res; 
    int nc = dispSeeds.ncol();
    int nr = dispSeeds.nrow();
    
    // BEGIN loop over seeds grid ("moving")
    for( int y=0; y < nc; y++ ){
      for( int x=0; x < nr; x++ ){
        // BEGIN loop over sd2D ("window")
        if ( dispSeeds(x, y) >= 0 ) {
          int indS = 0;
          for( int xS=x; xS <= x + dx2; xS++ )
            for( int yS=y; yS <= y + dy2; yS++, indS++ )
              s[indS]=seeds(xS, yS);
          res = 0;
          for( int i=0; i<s.size(); i++ ){
            if (s[i]>0 && sd2D[i]>0) {
              res += (int) ::Rf_rbinom((double)(s[i]), sd2D[i]);
            }
          }
          dispSeeds(x, y) = res;
        }
      }
    }
    // END loop over seeds
  
    return wrap( dispSeeds );
  }
#+END_SRC

* package management
** check package
#+begin_src sh :results output
  CWD=`pwd`
  R CMD check pkg | sed 's/^*/ */'
#+end_src

#+results:
#+begin_example
 * using log directory ‘/home/rkrug/Documents/Projects/R-Packages/seeddisp/pkg.Rcheck’
 * using R version 2.13.1 (2011-07-08)
 * using platform: i686-pc-linux-gnu (32-bit)
 * using session charset: UTF-8
 * checking for file ‘pkg/DESCRIPTION’ ... OK
 * checking extension type ... Package
 * this is package ‘seedDisp’ version ‘0.8-13’
 * checking package name space information ... OK
 * checking package dependencies ... OK
 * checking if this is a source package ... WARNING
Subdirectory ‘seedDisp/src’ contains object files.
 * checking for executable files ... OK
 * checking whether package ‘seedDisp’ can be installed ... OK
 * checking installed package size ... OK
 * checking package directory ... OK
 * checking for portable file names ... OK
 * checking for sufficient/correct file permissions ... OK
 * checking DESCRIPTION meta-information ... OK
 * checking top-level files ... OK
 * checking index information ... OK
 * checking package subdirectories ... WARNING
Subdirectory 'inst' contains no files.
 * checking R files for non-ASCII characters ... OK
 * checking R files for syntax errors ... OK
 * checking whether the package can be loaded ... OK
 * checking whether the package can be loaded with stated dependencies ... OK
 * checking whether the package can be unloaded cleanly ... OK
 * checking whether the name space can be loaded with stated dependencies ... OK
 * checking whether the name space can be unloaded cleanly ... OK
 * checking for unstated dependencies in R code ... OK
 * checking S3 generic/method consistency ... OK
 * checking replacement functions ... OK
 * checking foreign function calls ... OK
 * checking R code for possible problems ... OK
 * checking Rd files ... OK
 * checking Rd metadata ... OK
 * checking Rd cross-references ... OK
 * checking for missing documentation entries ... OK
 * checking for code/documentation mismatches ... OK
 * checking Rd \usage sections ... WARNING
Undocumented arguments in documentation object 'windDispGRASS'
  SEEDS MASK
Documented arguments not in \usage in documentation object 'windDispGRASS':
  input output
Objects in \usage without \alias in documentation object 'windDispGRASS':
  windDisp

Functions with \usage entries need to have the appropriate \alias
entries, and all their arguments documented.
The \usage entries must correspond to syntactically valid R code.
See the chapter 'Writing R documentation files' in the 'Writing R
Extensions' manual.
 * checking Rd contents ... OK
 * checking for unstated dependencies in examples ... OK
 * checking line endings in C/C++/Fortran sources/headers ... OK
 * checking line endings in Makefiles ... OK
 * checking for portable compilation flags in Makevars ... OK
 * checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ... OK
 * checking examples ... NONE
 * checking PDF version of manual ... OK
WARNING: There were 3 warnings, see
  ‘/home/rkrug/Documents/Projects/R-Packages/seeddisp/pkg.Rcheck/00check.log’
for details
#+end_example


** INSTALL package

#+begin_src sh :results output :var rckopts="--library=./Rlib"
  R CMD INSTALL $rckopts pkg
#+end_src

#+results:
: g++ -I/usr/share/R/include   -I"/home/rkrug/R/i486-pc-linux-gnu-library/2.13/Rcpp/include"   -fpic  -O3 -pipe  -g -c windDispCpp.cpp -o windDispCpp.o
: g++ -shared -o seedDisp.so windDispCpp.o -L/home/rkrug/R/i486-pc-linux-gnu-library/2.13/Rcpp/lib -lRcpp -Wl,-rpath,/home/rkrug/R/i486-pc-linux-gnu-library/2.13/Rcpp/lib -L/usr/lib/R/lib -lR


** build package

#+begin_src sh :results output
R CMD build pkg
#+end_src

#+results:
: * checking for file ‘pkg/DESCRIPTION’ ... OK
: * preparing ‘seedDisp’:
: * checking DESCRIPTION meta-information ... OK
: * cleaning src
: * checking for LF line-endings in source and make files
: * checking for empty or unneeded directories
: Removed empty directory ‘seedDisp/inst/doc’
: Removed empty directory ‘seedDisp/inst’
: * building ‘seedDisp_0.8-13.tar.gz’


** load library

#+begin_src R :session :results output :var libname=(file-name-directory buffer-file-name)
## customize the next line as needed: 
.libPaths(new = file.path(getwd(),"Rlib") )
require( basename(libname), character.only=TRUE)
#+end_src

#+results:

- this loads the library into an R session
- customize or delete the =.libPaths= line as desired 


: #+begin_src R :session :var libname=(file-name-directory buffer-file-name)
: .libPaths(new = file.path(getwd(),"Rlib") )
: require( basename(libname), character.only=TRUE)
: #+end_src

** grep require( 

- if you keep all your source code in this =.org= document, then you do not
  need to do this - instead just type =C-s require(=
- list package dependencies that might need to be dealt with

#+begin_src sh :results output
grep 'require(' R/*
#+end_src

: #+begin_src sh :results output
: grep 'require(' R/*
: #+end_src

** set up .Rbuildignore and man, R, and Rlib directories

- This document sits in the top level source directory. So, ignore it
  and its offspring when checking, installing and building.
- List all files to ignore under =#+results: rbi=  (including this
  one!). Regular expressions are allowed.
- Rlib is optional. If you want to INSTALL in the system directory,
  you own't need it.

: #+results: rbi
#+results: rbi
: Rpackage.*
: SVNSTATE
: MAINVERSION
: SVNVERSION

Only need to run this once (unless you add more ignorable files).

#+begin_src R :results output silent :var rbld=rbi 
dir.create("./seedDisp")
cat(rbld,'\n', file="./pkg/.Rbuildignore")
dir.create("./pkg/man")
dir.create("./pkg/R")
dir.create("./pkg/src")
dir.create("./Rlib")
#+end_src

: #+begin_src R :results output silent :var rbld=rbi 
: cat(rbld,'\n', file=".Rbuildignore")
: dir.create("man")
: dir.create("R")
: dir.create("../Rlib")
: #+end_src

* Tests and Tryouts
:PROPERTIES:
:tangle: no
:END:
- As part of developing a package one must try out some code and
  perhaps develop some tests to be sure it does what it is supposed to
  do.
- Here is an easy-to-read tryout of the =count.rows= function:
- You may need to edit or delete the =.libPaths= call to suit your
  setup

: #+begin_src R :session :results output :exports both
:  .libPaths( new = "./Rlib")
:   require( countRows ) 
:   simple.df <- data.frame( diag(1:4), row.names=letters[ 1:4 ])
:   repeated.df <- simple.df[ rep( 1:4, 4:1 ), ]
:   simple.df
:   count.rows( repeated.df )  
: #+end_src

* Version Control, Navigation, and setup tasks
** list files for convenient navigation 

- Use this if you do not use the =.org= document to keep the master for the
 source code
- It is useful when in a terminal window on a remote machine, and speedbar
  is not a good option. =C-u C-c C-o= or =Mouse-1= will open the file
  point is on.

#+begin_src R :results output verbatim :var cwd="."
  cat(paste("file:",list.files(cwd,".*",recursive=TRUE),sep=''),sep='\n')
#+end_src

: #+begin_src R :results output verbatim :var cwd="."
:   cat(paste("file:",list.files(cwd,".*",recursive=TRUE),sep=''),sep='\n')
: #+end_src

** Speedbar navigation

- Use this if you do not use the =.org= document to keep the master for the
  source code
- Make speedbar stick to the package source directory by typing 't' in
  its frame after executing this block:

#+begin_src emacs-lisp :results output silent
  (require 'speedbar)
  (ess-S-initialize-speedbar)
  ;; uncomment this line if it isn't in ~/.emacs:
  ;; (add-to-list 'auto-mode-alist '("\\.Rd\\'" . Rd-mode))
  (speedbar-add-supported-extension ".Rd")
  (speedbar-add-supported-extension "NAMESPACE")
  (speedbar-add-supported-extension "DESCRIPTION")
  (speedbar 1)
#+end_src



: #+begin_src emacs-lisp :results output silent
:   (require 'speedbar)
:   (ess-S-initialize-speedbar)
:   ;; uncomment this line if it isn't in ~/.emacs:
:   ;; (add-to-list 'auto-mode-alist '("\\.Rd\\'" . Rd-mode))
:   (speedbar-add-supported-extension ".Rd")
:   (speedbar-add-supported-extension "NAMESPACE")
:   (speedbar-add-supported-extension "DESCRIPTION")
:   (speedbar 1)
: #+end_src

** Version Control

- If you don't use svn, substitute the relevant version control
  command in each block in this section

- Each of these can be run by putting point on the headline then
  keying =C-c C-v C-s y=

- Possibly add --username=<> --password=<> to the svn commands

*** svn list 

- Show what files are version controlled

#+begin_src sh :results output
svn list --recursive 
#+end_src

: #+begin_src sh :results output
: svn list --recursive 
: #+end_src

*** svn update 

- Use at the start of each session to sync changes from other machines

#+begin_src sh :results output
svn update 
#+end_src

: #+begin_src sh :results output
: svn update 
: #+end_src

*** svn commit

- At the end of a day's work commit the changes

#+begin_src sh :results output :var TANGLED=(org-babel-tangle) :tangle no
  echo "  l   w   b     fn"
  wc $TANGLED
  ./postTangleScript.sh
  svn commit  -m "edits"
#+end_src

#+results:
#+begin_example
  l   w   b     fn
  46  182 1257 ./pkg/src/windDispCpp.cpp
  22  108  681 ./pkg/src/windDispCpp.h
  22   56  468 ./pkg/man/disp-package.Rd
  28  104  718 ./pkg/man/windDisp.Rd
  36  166 1148 ./pkg/R/windDisp.R
   2    2   51 ./pkg/NAMESPACE
  12   39  323 ./pkg/DESCRIPTION
   3   19  172 ./pkg/src/Makevars.win
  26  147  960 ./pkg/src/Makevars
  25   43  463 ./postTangleScript.sh
 222  866 6241 total
Sending        disp.org
Sending        pkg/.Rbuildignore
Sending        pkg/DESCRIPTION
Sending        pkg/R/windDisp.R
Sending        postTangleScript.sh
Transmitting file data .....
Committed revision 6.
#+end_example
* Package structure and src languages                              :noexport:

- The top level directory may contain these files (and others):

| filename    | filetype      |
|-------------+---------------|
| INDEX       | text          |
| NAMESPACE   | R-like script |
| configure   | Bourne shell  |
| cleanup     | Bourne shell  |
| LICENSE     | text          |
| LICENCE     | text          |
| COPYING     | text          |
| NEWS        | text          |
| DESCRIPTION | [[http://www.debian.org/doc/debian-policy/ch-controlfields.html][DCF]]           |
|-------------+---------------|


 
   and subdirectories
| direname | types of files                                   |
|----------+--------------------------------------------------|
| R        | R                                                |
| data     | various                                          |
| demo     | R                                                |
| exec     | various                                          |
| inst     | various                                          |
| man      | Rd                                               |
| po       | poEdit                                           |
| src      | .c, .cc or .cpp, .f, .f90, .f95, .m, .mm, .M, .h |
| tests    | R, Rout                                          |
|----------+--------------------------------------------------|
|          |                                                  |
   
 [[info:emacs#Specifying%20File%20Variables][info:emacs#Specifying File Variables]]
