#    -*- mode: org -*-


Archived entries from file /home/rkrug/Documents/Projects/AlienSpread/trunc/seeddisp/disp.org


* calcDepLayer
  :PROPERTIES:
  :ARCHIVE_TIME: 2011-10-04 Tue 13:48
  :ARCHIVE_FILE: ~/Documents/Projects/AlienSpread/trunc/seeddisp/disp.org
  :ARCHIVE_OLPATH: seedDisp package/R/waterDispGRASS
  :ARCHIVE_CATEGORY: disp
  :END:

#+begin_src R  :eval nil :tangle ./pkg/R/calcDepLayer.R :no-expand
  ##' Calculate GRASS mapcalc function to calculate water dispersal layer
  ##' 
  ##' @usage calcDepLayerGRASS(input, output="depLayer", slope="slope", flowdir="flowdir", depRates, overwrite=FALSE
  ##' @name calcDepLayerGRASS
  ##' @title Determine formula for Deposit layer
  ##' 
  ##' @param slope \code{character} name of slope layer 
  ##' @param flowdir \code{character} name of flow direction layer in GRASS agnps format
  ##' @param depRates \code{list} list of two \code{numeric} vectors of same length, where depRates[[1]] are the degrees and depRates[[2]] the according deposit rates
  ##' @param overwrite \code{boolean} TRUE to overwrite existing output raster
  ##' @return \code{character} ?????
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  ##' @export 
  ##' @callGraphPrimitives
  calcDepLayerGRASS <- function(slope="slope", flowdir="flowdir", depRates, overwrite=FALSE, debug=TRUE) {
    stop("TO BE IMPLEMENTED")
  
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) )  & !overwrite ) {
      stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    } 
    ## #####################
    r.mapcalc <- function(...)
      {
        comm <- paste( "r.mapcalc ", " \"", ..., "\" ", sep="" )
        system( comm, intern=TRUE )
      }
  
    ## #####################
    ## this function should return a vector containing information on how to calculate the number of seed s in the final matrix
    .flowNext <- function(
                          x,              # x-location in matrix
                          y,              # y-location in matrix
                          dep,            # deposit rates matrix
                          dir             # flow direction matrix
                          )
      {
        if (
            !is.na(FLOW[x, y])  |
            is.na(dep[x, y])  |
            dep[x, y] ==1     |
            is.na(dir[x, y])
            ) {
          FLOW[x, y] <<- FLOW[x, y] + seeds
          seeds <- 0
        } else {
          dep <- round( seeds * dep[x, y] )
          FLOW[x, y] <<- dep
          seeds <- seeds - dep
        }
        if (seeds > 0)
          {
            switch(
                   dir[x, y],
                   {x <- x    ; y <- y - 1}, # 1
                   {x <- x + 1; y <- y    }, # 2
                   {x <- x + 1; y <- y    }, # 3
                   {x <- x + 1; y <- y    }, # 4
                   {x <- x    ; y <- y + 1}, # 5
                   {x <- x - 1; y <- y + 1}, # 6
                   {x <- x - 1; y <- y + 1}, # 7
                   {x <- x - 1; y <- y    }, # 8
                   {stop("Wrong number for dir!")}
                   )
            if (seeds > 1)
              {
                .flowNext(x, y, seeds, dep, dir)
              }
          }
        return(list(x, y, seeds))
      }
    ## #####################
    
    names(depRates) <- c("depDegrees", "depRates")
    ## read slope layer
    slope <- readRAST6(
                       slope,
                       NODATA = -1
                       )
    slope.m <- matrix(
                      slope[[1]],
                      nrow=gridparameters(slope)$cells.dim[1],
                      ncol=gridparameters(slope)$cells.dim[2]
                      )
    ## read flowdir layer
    flowdir <- readRAST6(
                         flowdir,
                         NODATA = -1
                         )
    flowdir.m <- matrix(
                        flowdir[[1]],
                        nrow=gridparameters(flowdir)$cells.dim[1],
                        ncol=gridparameters(flowdir)$cells.dim[2]
                        )
    ## calculate deposit rates (depRate)
    depRate <- slope
    depRate[[1]] <- cut(
                        x      = slope[[1]],
                        breaks = depRates$depDegrees,
                        labels = FALSE
                        )
    depRate[[1]] <- depRates$depRate[depRate[[1]]]
    depRate.m <- matrix(
                        depRate[[1]],
                        nrow=gridparameters(depRate)$cells.dim[1],
                        ncol=gridparameters(depRate)$cells.dim[2]
                        )
    ## Create output layer (seeds$output)
    dep.m <- depRate.m
    dep.m[] <- "0"
  
    ## calculate number of seeds to be dispersed into cells downstream
    for (x in 1:nrow(flowdir.m))
      {
        cat(x, " ")
        for (y in 1:ncol(flowdir.m))
          {
            if (isTRUE(depRate.m[x, y] > 0 & depRate.m[x,y] < 1))
              {
                FLOW[x, y] <<- FLOW[x, y] + seeds
                seeds <- 0
              } else {
                dep <- "round( seeds * dep[x, y] )
                FLOW[x, y] <<- dep
                seeds <- seeds - dep
              }
            if (seeds > 0)
              {
                switch(
                       dir[x, y],
                       {x <- x    ; y <- y - 1}, # 1
                       {x <- x + 1; y <- y    }, # 2
                       {x <- x + 1; y <- y    }, # 3
                       {x <- x + 1; y <- y    }, # 4
                       {x <- x    ; y <- y + 1}, # 5
                       {x <- x - 1; y <- y + 1}, # 6
                       {x <- x - 1; y <- y + 1}, # 7
                       {x <- x - 1; y <- y    }, # 8
                       {stop("Wrong number for dir!")}
                       )
                if (seeds > 1)
                  {
                    .flowNext(x, y, seeds, dep, dir)
                  }
              }
            path <- !is.na(FLOW)
            seeds$output[path] <- as.vector(FLOW[path])
            FLOW[path] <- NA
          }
      }
  
  }
  cat( "\n" )
  
    ## seedsSoil[[1]][seedsSoil[[1]]==0] <- NA
  
    ## ## save seedsSoil layer
    ## mode( seedsSoil[[1]] ) <- "double"
    ## seedsSoil@proj4string <- parameter$proj4string
    ## writeRAST6(
    ##            seedsSoil,
    ##            layerName(species, type="seedsSoil", year=parameter$year),
    ##            NODATA = -1,
    ##            zcol=1,
    ##            overwrite = TRUE
    ##            )
  
    ## ## g.remove( "rast=", tmpDispWater, ignore.stderr=TRUE )
    ## execGRASS(
    ##           cmd = "g.remove",
    ##           parameter = list(
    ##             rast = tmpDispWater
    ##             ),
    ##           ignore.stderr=!options("asmDebug")[[1]]
    ##           )
    
    ## dummy output
    r.mapcalc(output, " = ", "input")
    return(output)
  }
  
#+end_src

#+results:


* waterDispGRASS
  :PROPERTIES:
  :ARCHIVE_TIME: 2011-10-04 Tue 13:49
  :ARCHIVE_FILE: ~/Documents/Projects/AlienSpread/trunc/seeddisp/disp.org
  :ARCHIVE_OLPATH: seedDisp package/R
  :ARCHIVE_CATEGORY: disp
  :END:
#+begin_src R  :eval nil :tangle ./pkg/R/waterDispGRASS.R :no-expand
  ##' Water disperse seeds from a seed layer using GRASS
  ##' 
  ##' @usage waterDispGRASS(input, output="waterDispSeeds", slope="SLOPE", flowdir="FLOWDIR", overwrite=FALSE)
  ##' @name waterDispGRASS
  ##' @title Dispersal of seeds by water
  ##' 
  ##' @param input \code{character} name of GRASS raster layer specifying number of seeds to be dispersed
  ##' @param output \code{character} name of GRASS raster layer generated, containing the dispersed seeds
  ##' @param slope \code{character} name of GRASS raster layer containing the slope in degrees
  ##' @param flowdir \code{character} name of GRASS raster containing flow direction (in GRASS agnps format)
  ##' @param depRates \code{matrix} where the first column are slope and the second column the responding deposit rates
  ##' @param overwrite \code{boolean} TRUE to overwrite existing output raster
  ##' @return \code{character} name of the output layer
  ##' @author Rainer M Krug \email{Rainer@@krugs.de}
  ##' @export 
  ##' @callGraphPrimitives
  waterDispGRASS <- function(input, output="waterDispSeeds", slope="slope", flowdir="flowdir", depRates, overwrite=FALSE) {
    stop("TO BE IMPLEMENTED")
  
    if ( length( execGRASS("g.mlist", type="rast", pattern=output, intern=TRUE) )  & !overwrite ) {
      stop(paste("Layer", output, "exists! Please specify 'overwrite=TRUE' or use different output name!"))
    }
  #######################
    names(depRates) <- c("depDegrees", "depRates")
    ## Load seeds layer
    seeds <- readRAST6(
                       input,
                       NODATA = -1
                       )
    seeds.m <- matrix(
                      seeds[[1]],
                      nrow=gridparameters(seeds)$cells.dim[1],
                      ncol=gridparameters(seeds)$cells.dim[2]
                      )
    # seeds.m[is.na(seeds.m)] <- -1  
    ## Load slope layer
    slope <- readRAST6(
                       slope,
                       NODATA = -1
                       )
    slope.m <- matrix(
                      slope[[1]],
                      nrow=gridparameters(slope)$cells.dim[1],
                      ncol=gridparameters(slope)$cells.dim[2]
                      )
    ## Load flowdir layer
    flowdir <- readRAST6(
                         flowdir,
                         NODATA = -1
                         )
    
    flowdir.m <- matrix(
                        flowdir[[1]],
                        nrow=gridparameters(flowdir)$cells.dim[1],
                        ncol=gridparameters(flowdir)$cells.dim[2]
                        )
    ## calculate deposit rates (depRate)
    depRate <- slope
    depRate[[1]] <- cut(
                        x      = slope[[1]],
                        breaks = depRates$depDegrees,
                        labels = FALSE
                        )
    depRate[[1]] <- depRates$depRate[depRate[[1]]]
    depRate.m <- matrix(
                        depRate[[1]],
                        nrow=gridparameters(depRate)$cells.dim[1],
                        ncol=gridparameters(depRate)$cells.dim[2]
                        )
    ## Create output layer (seeds$output)
    seeds$output <- NA
    output.m <- seeds.m
    output.m[] <- 0
    
    ## calculate number of seeds to be dispersed into cells downstream
    ## TODO add filters to only calculate relevant cells
  
    seedsDep.m <- ceiling(depRate.m * seeds.m)
    output.m <- output.m + seedsDep.m
    seeds.m <- seeds.m - seedsDep.m
    seeds.m[seeds.m < 0] <- 0
    seeds.m <- shiftMbyAgnps(seeds.m, agnps)
  
    
  } 
#+end_src


* Version Control, Navigation, and setup tasks                     :noexport:
:PROPERTIES:
:ARCHIVE_TIME: 2013-04-24 Wed 17:00
:ARCHIVE_FILE: ~/Documents/Projects/AlienManagementDrakensberg/sim/packages/seedDisp/seedDisp.org
:ARCHIVE_CATEGORY: seedDisp
:END:
** list files for convenient navigation 

- Use this if you do not use the =.org= document to keep the master for the
 source code
- It is useful when in a terminal window on a remote machine, and speedbar
  is not a good option. =C-u C-c C-o= or =Mouse-1= will open the file
  point is on.

#+begin_src R :results output verbatim :var cwd="."
  cat(paste("file:",list.files(cwd,".*",recursive=TRUE),sep=''),sep='\n')
#+end_src

: #+begin_src R :results output verbatim :var cwd="."
:   cat(paste("file:",list.files(cwd,".*",recursive=TRUE),sep=''),sep='\n')
: #+end_src

** Speedbar navigation

- Use this if you do not use the =.org= document to keep the master for the
  source code
- Make speedbar stick to the package source directory by typing 't' in
  its frame after executing this block:

#+begin_src emacs-lisp :results output silent
  (require 'speedbar)
  (ess-S-initialize-speedbar)
  ;; uncomment this line if it isn't in ~/.emacs:
  ;; (add-to-list 'auto-mode-alist '("\\.Rd\\'" . Rd-mode))
  (speedbar-add-supported-extension ".Rd")
  (speedbar-add-supported-extension "NAMESPACE")
  (speedbar-add-supported-extension "DESCRIPTION")
  (speedbar 1)
#+end_src



: #+begin_src emacs-lisp :results output silent
:   (require 'speedbar)
:   (ess-S-initialize-speedbar)
:   ;; uncomment this line if it isn't in ~/.emacs:
:   ;; (add-to-list 'auto-mode-alist '("\\.Rd\\'" . Rd-mode))
:   (speedbar-add-supported-extension ".Rd")
:   (speedbar-add-supported-extension "NAMESPACE")
:   (speedbar-add-supported-extension "DESCRIPTION")
:   (speedbar 1)
: #+end_src

** Version Control

- If you don't use svn, substitute the relevant version control
  command in each block in this section

- Each of these can be run by putting point on the headline then
  keying =C-c C-v C-s y=

- Possibly add --username=<> --password=<> to the svn commands

*** svn list 

- Show what files are version controlled

#+begin_src sh :results output
svn list --recursive 
#+end_src

: #+begin_src sh :results output
: svn list --recursive 
: #+end_src

*** svn update 

- Use at the start of each session to sync changes from other machines

#+begin_src sh :results output
svn update 
#+end_src

: #+begin_src sh :results output
: svn update 
: #+end_src

*** svn commit

- At the end of a day's work commit the changes

#+begin_src sh :results output :var TANGLED=(org-babel-tangle) :tangle no
  echo "  l   w   b     fn"
  wc $TANGLED
  ./postTangleScript.sh
  svn commit  -m "edits"
#+end_src

#+results:
#+begin_example
  l   w   b     fn
  46  182 1257 ./src/windDispCpp.cpp
  22  108  681 ./src/windDispCpp.h
  22   56  468 ./man/disp-package.Rd
  28  104  718 ./man/windDisp.Rd
  36  166 1148 ./R/windDisp.R
   2    2   51 ./NAMESPACE
  12   39  323 ./DESCRIPTION
   3   19  172 ./src/Makevars.win
  26  147  960 ./src/Makevars
  25   43  463 ./postTangleScript.sh
 222  866 6241 total
Sending        disp.org
Sending        .Rbuildignore
Sending        DESCRIPTION
Sending        R/windDisp.R
Sending        postTangleScript.sh
Transmitting file data .....
Committed revision 6.
#+end_example

* Tests and Tryouts                                                :noexport:
:PROPERTIES:
:tangle: no
:ARCHIVE_TIME: 2013-04-24 Wed 17:00
:ARCHIVE_FILE: ~/Documents/Projects/AlienManagementDrakensberg/sim/packages/seedDisp/seedDisp.org
:ARCHIVE_CATEGORY: seedDisp
:END:
- As part of developing a package one must try out some code and
  perhaps develop some tests to be sure it does what it is supposed to
  do.
- Here is an easy-to-read tryout of the =count.rows= function:
- You may need to edit or delete the =.libPaths= call to suit your
  setup

: #+begin_src R :session :results output :exports both
:  .libPaths( new = "./Rlib")
:   require( countRows ) 
:   simple.df <- data.frame( diag(1:4), row.names=letters[ 1:4 ])
:   repeated.df <- simple.df[ rep( 1:4, 4:1 ), ]
:   simple.df
:   count.rows( repeated.df )  
: #+end_src


* waterDisp
:PROPERTIES:
:ARCHIVE_TIME: 2013-07-17 Wed 13:58
:ARCHIVE_FILE: ~/Documents/Projects/AlienManagementDrakensberg/sim/packages/seedDisp/seedDisp.org
:ARCHIVE_OLPATH: R directory (./R)/Water dispersal
:ARCHIVE_CATEGORY: seedDisp
:END:
This function will convert the apnps direction from GRASS into index differences for a R matrix

- From GRASS :: agnps based
|---+---+---|
| 8 | 1 | 2 |
|---+---+---|
| 7 |   | 3 | 
|---+---+---|
| 6 | 5 | 4 |
|---+---+---|

- In R matrix ::
|---+---+---|
| 6 | 5 | 4 |
|---+---+---|
| 7 |   | 3 |
|---+---+---|
| 8 | 1 | 2 |
|---+---+---|

- In R matrix :: based on e.g. ~as.matrix(readGRASS6())~:
|------------+----------+------------|
| [x-1, y-1] | [x, y-1] | [x+1, y-1] |
|------------+----------+------------|
| [x-1, y  ] | [x, y  ] | [x+1, y  ] |
|------------+----------+------------|
| [x-1, y+1] | [x, y+1] | [x+1, y+1] |
|------------+----------+------------|

#+begin_src R  :eval nil :tangle ./R/waterDisp.R :no-expand
  ##' Flow cells in m by one cell usind the direction given in agnps and adds the
  ##' 
  ##' @usage waterDisp(m, agnps, depRate)
  ##' @name waterDisp
  ##' @title Disperse seeds using water dispersal
  ##' 
  ##' @title Disperse seeds in \code{input} in direction given in \code{agnps} using deposit rates in \code{depRates} until all seeds are deposited
  ##' @param input \code{matrix} of seeds to be dispersed by water flow
  ##' @param depRate \code{matrix} of deposit rates
  ##' @param agnps \code{matrix} of same dim=ension as \code{m} containing agnps flow directions as returned from GRASS of same dimensionality as \code{input}
  ##' @param zeroToNULL \code{boolean} if TRUE convert zeros to NA, otherwise NA to 0
  ##' @param progress \code{boolean} if TRUE, showing progress, otherwise silent
  ##' @param m \code{matrix} to be "flown" of same dimensionality as \code{input}
  ##' @return 
  ##' @author Rainer M Krug
  ##' @export 
  ##' @callGraphPrimitives
  waterDisp <- function(input, depRate, agnps, zeroToNULL=TRUE, progress=TRUE) {
    ## define vectors for flowing direction translation from agnps to matrix
    ## agnps 1,  2,  3,  4,  5,  6,  7,  8) 
    dx <- c( 0, +1, +1, +1,  0, -1, -1, -1) # first index in matrix
    dy <- c(-1, -1,  0, +1, +1, +1,  0, -1) # second index in matrix
    ## create index Matix
    im <- cbind(
      rep(1:nrow(input), each=ncol(input)),
      rep(1:ncol(input), nrow(input))
      )
    ## create "flowed" index matrix
    ## this matrix will contain the NEW locations of the cells
    ## Cells not included in ims will be set to NA, as nothing flows into them.
    ims <- im
    ## calculate x-flow
    ims[,1] <- im[,1] + dx[agnps[im]]
    ## and correct for "out of matrix flows"
    ims[,1][ims[,1] < 1      ] <- NA
    ims[,1][ims[,1] > nrow(input)] <- NA
    ## calculate y-flow
    ims[,2] <- im[,2] + dy[agnps[im]]
    ## and correct for "out of matrix flows"
    ims[,2][ims[,2] < 1      ] <- NA
    ims[,2][ims[,2] > ncol(input)] <- NA
    ## remove all which have NA from im and ims
    sel <- !is.na(ims[,1]) & !is.na(ims[,2])
    im <- im[sel,]
    ims <- ims[sel,]
    ## build flowed matrix m
    output.dep <- input
    output.dep[] <- 0
    output.disp <- input
    ## populate output
    j <- 0
    ## call recursively, until the number of seeds in output.disp == 0
    repeat {
      ## set new input.disp to previous output.disp
      input.disp <- output.disp
      input.disp[is.na(input.disp)] <- 0
      output.disp[] <- 0
      ## define imX andimsX, as they will be modified in the while loop
      imX <- im
      imsX <- ims
      j <- j+1
      while (nrow(imsX) > 0) {
        if (progress) {
          print( paste(j, sum(output.disp, na.rm=TRUE),  sum(input.disp, na.rm=TRUE)) )
        }
        ## identify uniques
        uni <- !duplicated(imsX)
        ## calculate seeds to be leaving cell 
        flow <-  ceiling( (1 - depRate[imX[uni,]]) * input.disp[imX[uni,]] )
        ## subtract flowing seeds from initial cells
        output.dep[imX[uni,]] <- output.dep[imX[uni,]] + ( input.disp[imX[uni,]] - flow )
        ## add flowing seeds to target cells
        output.disp[imsX[uni,]] <- output.disp[imsX[uni,]] + flow
        ## take unique calls away and start again
        imX  <- imX [!uni,]
        imsX <- imsX[!uni,]
      }
      if (sum(output.disp, na.rm=TRUE) == 0) {
        break()
      }
    }
    ##
    if (zeroToNULL) {
      output.dep[output.dep==0] <- NA
    } else {
      output.dep[is.na(output.dep)] <- 0
    }
    return(output.dep)
  }
#+end_src

